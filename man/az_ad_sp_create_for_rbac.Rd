% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ad.R
\name{az_ad_sp_create_for_rbac}
\alias{az_ad_sp_create_for_rbac}
\alias{scope_down}
\title{Create a service principal (sp) and configure its access to Azure resources}
\usage{
az_ad_sp_create_for_rbac(
  name = get_ghactions_url(),
  role = "Contributor",
  scopes = scope_down(),
  years = 1,
  ...
)

scope_down(
  subscription = az_account_show()$id,
  resource_group = az_configure_list()$resource_group,
  provider = paste("Microsoft.Web", "sites", az_configure_list()$name, sep = "/")
)
}
\arguments{
\item{name}{A URI to use as the logic name.
It doesn't need to exist.
If not present (\code{NULL}), CLI will generate one (\strong{not recommended}).

This is not the app name \emph{to which} you're giving access, but the "app" which will be doing the accessing (say, a CI service).
The purpose of this name is to document the purpose of the sp.
Default uses the GitHub Actions URL for the repo to indicate that the sp is used inside GitHub Actions.}

\item{role}{Role of the service principal.
Default value (or if \code{NULL}): \code{Contributor}.}

\item{scopes}{Space-separated list of scopes the service principal's role assignment applies to.
If \code{NULL} (\strong{not recommended}) sets the root of the current subscription.
Should be as minimal as possible.
Defaults to \code{\link[=scope_down]{scope_down()}}.}

\item{years}{Number of years for which the credentials will be valid.
Default: 1 year.
Secrets should be rotated more often for extra security.}

\item{...}{
  Arguments passed on to \code{\link[=az_cli_run]{az_cli_run}}
  \describe{
    \item{\code{cmd}}{Command, required, optional, additional, extra parameters, as for \code{\link[processx:run]{processx::run()}}
\code{add} parameters are reserved for the user to pass down additional arguments to the Azure CLI.
\code{extra} parameters are reserved for internal use.}
    \item{\code{req}}{Command, required, optional, additional, extra parameters, as for \code{\link[processx:run]{processx::run()}}
\code{add} parameters are reserved for the user to pass down additional arguments to the Azure CLI.
\code{extra} parameters are reserved for internal use.}
    \item{\code{opt}}{Command, required, optional, additional, extra parameters, as for \code{\link[processx:run]{processx::run()}}
\code{add} parameters are reserved for the user to pass down additional arguments to the Azure CLI.
\code{extra} parameters are reserved for internal use.}
    \item{\code{add}}{Command, required, optional, additional, extra parameters, as for \code{\link[processx:run]{processx::run()}}
\code{add} parameters are reserved for the user to pass down additional arguments to the Azure CLI.
\code{extra} parameters are reserved for internal use.}
    \item{\code{echo_cmd}}{Whether to print the command to run to the screen.}
    \item{\code{echo}}{Whether to print the standard output and error
to the screen. Note that the order of the standard output and error
lines are not necessarily correct, as standard output is typically
buffered.}
  }}

\item{subscription}{Name or ID of the Azure subscription to which costs are billed.
According to an upvoted answer on Stack Overflow, \href{https://stackoverflow.com/questions/45661109/are-azure-subscription-id-aad-tenant-id-and-aad-app-client-id-considered-secre}{Azure subscription IDs need not be considered a secret or personal identifiable information (PII)}.
However, depending your applicable context and policies, you may want to provide this argument as a secret.

To find out which subscriptions you are currently authorised to use, run \code{print(az_account_list())}.}

\item{resource_group}{The \href{https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/manage-resource-groups-portal}{Azure resource group} to which the app service should belong.}

\item{provider}{Specific Azure resource and its name to scope down to (such as a webapp).
Defaults to a web app named via \code{\link[=az_configure]{az_configure()}}.
Set to \code{NULL} to skip (not recommended).}
}
\description{
Prints a secret to the console as a JSON object.
Copy and set as a secret on your GitHub repository for use with the \href{https://github.com/Azure/login}{Azure Login Action}.
}
\details{
This is only necessary if you want an sp to programmatically access Azure resources on your behalf, as for example in a CI context.
If you only want interactive access to Azure resources, use \code{\link[=az_login]{az_login()}} instead.
You can manage existing sps on portal.azure.com.
}
\section{Functions}{
\itemize{
\item \code{scope_down}: Minimal scopes for a webapp, as recommended by \href{https://github.com/Azure/login}{Azure Login GitHub Action}, as of commit \href{https://github.com/Azure/login/commit/7e173d1a149e25731edf6857f7e506328c7c1d05}{\verb{7e173d1}}.
Check back with the source for current security recommendations.
\code{subscription} requires an ID, does not work with a name.
Use \code{az_account_show()} to substitute an ID for a name as in the default.
}}

\section{Warning}{

The printed secret allows programmatic access to an Azure resource and can be used for malicious purposes.
\strong{Ensure that the printed secret is never disclosed}.
For example, make sure that your console logs aren't disclosed.
For security reasons, this function will only run in an interactive session.
}

